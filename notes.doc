TODO:

0. segault at 64 128 128
1. PDF for e
2. memory estimate.  why off by a factor of 2?
3. timers in compute_pdf
4. random vorticity (not stream function)

1. create new mpi communicator for sforcing routines
2. use a mpi defined type for the buffer->2d array copy in transpose.F90
3. post more messages at once in tranpose.F90?  
6. divergence: go to Shashkov formula?  

**********************************************************************************
sizes
Nirvana:  32Gb per box.  optimal is 225M per CPU.  = 29Gb.
                                        max size: 502?. fft: 400?
          2 Boxes, 64Gb.  optimal size: 550.  

QidSE:  16x4 cpus.  64Gb memory
Qid:   128x4        512Gb memory
                         

Linux box sizes:
 64^3     60M            5 arrays,3 coordinates=5*3*8*64^3 
 96^3    197M
128^3    462M


256^3   3.8Gb                  
512^3:  31Gb             array size: 15Gb.  
1024^3  410Gb               

2048^4  3280Gb                 

size = .1*n^3/64^3 

grid:  (n/256)**3 (n/256)

t=.05                              Nirv    BlueMtn      
one box timings:  256 on 32 cpus            > 15min
                  256 on 64 cpus   9.11m    8.32
                  256 on 128 cpus  7.65m    4.11m        
                  250 on 125 cpus  7.65m    3.98m

                  384 on 128 cpus.           no
                  375 on 125 cpus.           no
                  360 on 120 cpus.           no
                  400 on 5x1x25              27.03m
                  400 on 1x100               32.09m

t=.01
two box timings:  512 on 256 cpus   pend
                  500 on 250 cpus.           in



**********************************************************************************
parallel timings on blue mountain.  
Nirvana is too unreliable.  

256x256x256

1x1x128 parallel decompostion
                          dns_solve      _to_z   _from_z
original                     1.36         .41     .40

block=1                      1.43         .47     .41
block=1                      1.36         .44     .38

block=2                      1.33         .41.    .37
block=2                      1.32         .41     .37

block=4                      1.84         .74     .53
block=4                      1.32         .44     .33
block=4                      1.31         .42     .34


block=32

block=128                    1.45         .51     .39
                             1.51         .54     .41



                          dns_solve      _to_z   _from_z
original 1x2x64              1.81        .49      .37
original 1x4x32              1.79        .44      .33
original 1x8x16      IN





**********************************************************************************
FFT timings. 

*****************************************************************

64x64x64 timings (1cpu)    110M
./bench.sh 64  
run to .1 
CFL=1.5/.25

autrey (linux) PGI F90 
STK2+PGCC                   .62  .62

autrey (linux) INTEL
STK2+PGCC                   .58  .58

Nirvana SGIFFT             
Nirvana SGIFFT 3d multiple 
Nirvana FFT99              
Nirvana STK                


Truchas (Compaq ES40)
FFT99 
STK2  
CPQ   


*****************************************************************

1024x1024x1 timings (1cpu)  run size: 380M
./bench.sh 1024
CFL=1.5/.25

Linux laptop PGI F90
FFT99        
STK+gcc       
STK+PGCC     

Truchas Compaq ES40
FFT99     1.70  1.74  1.74
STK       1.60  1.59  1.60
CPQ       1.46  1.46  1.46


*****************************************************************

96x96x96 timings (1cpu)  runsize: 320Mb
./bench.sh 256
CFL=1.5/.25

Linux laptop Lahey
STK    3.08
FFT99  2.85 2.86



*****************************************************************

256x8x256 timings (1cpu)  runsize: 241M
./bench.sh 256
CFL=1.5/.25


Linux laptop Lahey
FFT99        4.48  4.41
STK+gcc      3.14  3.13


Truchas Compaq ES40
FFT99      1.68  1.70
STK        1.51  1.51
CPQ        1.52  1.52




**********************************************************************************
analytic CFL:  for RK4, norm(G)<2.4

dealiased:  k=KMAX*(2/3) = N/3 = 1/(3delx)


advection:  G = i 2pi  (u,v,w)dot(kx,ky,kz) delt  
            |G| <= 2pi/3 delt ( U/dx + V/dy + W/dz)

    (U/dx+V/dy+W/dz) delt <= 2.4 3 / 2pi = 1.15


diffusion: G = mu 4 pi^2 (kx^2 +ky^2 + kz^2)  delt
             = mu (4/9) pi^2 (delx^-2 + dely^-2 + delz^-2)

      mu delt/(delx^2+dely^2+delz^2)  < 2.4 (9/4) / pi^2  = .55

.70: unstable
.60: seems stable.  lets go with .55



**********************************************************************************
