TODO:

1.1  FFT in blocks - faster if they are dimensioned:  x(lot,128)?  
2. use a mpi communcator for the buffer->2d array copy in transpose.F90
3. post more messages at once in tranpose.F90?  
4. loops in ns3d.F90
5. timers:  time initialization
            everything after initialization
            time spent in transpose operator
            time spent in ns3d
            time spent in output

6. divergence: go to Shashkov formula?  

NOTES:

(1) poisson solve:  inner most tranform_to_z/transform_from_z pair
could be removed if we can compute the wave numbers of all
the coefficients in the z-decomposition .  

**********************************************************************************
structure function:
 <  [ u(x+l)-u(x) ]^p  >   


**********************************************************************************
FFT timings.  So quick & dirty fft timings (512x512x1) on Nirvana:

fft99:  115s
stk:     96s
sgi:     87s


quick & dirty 64x64x64 timings (1cpu)  
./bench.sh 64  
run to .1 
CFL=1.5/.25


linux laptop (PGI F90):     1.06  1.06
linux laptop (Lahey F90):   1.25  1.25 
Nirvana (SGI O2)             .94  .95  .94
Autrey (Sun Ultra 60):       .93  .92  .92
linux desktop:               
truchas (Compaq ES40):       .26  .29  .29







**********************************************************************************
analytic CFL:  for RK4, norm(G)<2.4

dealiased:  k=KMAX*(2/3) = N/3 = 1/(3delx)


advection:  G = i 2pi  (u,v,w)dot(kx,ky,kz) delt  
            |G| <= 2pi/3 delt ( U/dx + V/dy + W/dz)

    (U/dx+V/dy+W/dz) delt <= 2.4 3 / 2pi = 1.15

1.30: seems stable 500 time steps


diffusion: G = mu 4 pi^2 (kx^2 +ky^2 + kz^2)  delt
             = mu (4/9) pi^2 (delx^-2 + dely^-2 + delz^-2)

      mu delt/(delx^2+dely^2+delz^2)  < 2.4 (9/4) / pi^2  = .55

.70: unstable
.60: seems stable.  lets go with .55



**********************************************************************************
