**********************************************************************************
10/24/01

Memory leak on Q?


Q: 512x512x256: formula                 288Mb per cpu
                observed:               334M
                using gridsetup.py 1 1 32 512 512 256 2 2 0

1 cpu:       formula    observed
514x514x10    362         385
130x130x130   301         326   



512^3  on Q.
32 cpus:  512x512x16
                               formula   obs
1 cpu running 514x514x18:        653      700


forcing: none
initial cond: Q=0, projection disabled


4 cpu running 256x256x256        603      crashes
              2    2   2

1 cpu running 256x256x64         603       650
                2   2  2





**********************************************************************************
10/8/01 
64^3 decaying turbulense
tag: temp1  output: temp1.out in temp1 directory


tag: temp2  output: temp2.out in src directory

check these two runs: structure functions shoold be the same.
second run should have epsilon structure function




**********************************************************************************
8/22/01 KH 384x384x384 parallel benchmark runs on SGI 128cpus.

pbench.job
input: benchmark1024.inp  
(cfl = 1.5/.25  vis=2e-4, t_final=.002)


SGI FFT (2dM)
1 message at a time

1x1x128
4x4x8
1x8x16



**********************************************************************************
8/9/01  KH 1024x1024 

mu = .0002/8 = 2.5e-5
CFL = 1.5
run to time=3.  Looks good.  







**********************************************************************************
8/7/01  More 128x128 runs.  

128x128 can handle mu=.0002 to t=1.  What happens if we run longer?

KH inintial condition:

4th order:

CFL=2.0   t=4 noisy, but just two large blobs
CFL=1.9   t=4 looks good, t=10 is noisy
CFL=1.8   t=10 ok, t=20 noisy
CFL=1.7   t=20 ok, t=30 noisy.
CFL=1.65  goes bad at t=47! 
CFL=1.6   t=4 ok, t=10 ok, t=30 ok, t=50 ok
CFL=1.5   t=4 ok, t=10 ok, t=30 ok, t=50 ok
CFL=1.0   t=4 looks good, t=10 looks good.  two large blobs


3rd order:

CFL=1.5   t=1 looks bad.
CFL=1.25  goes bad around t=22
CFL=1.20  t=50 looks good.  
CFL=1.125 t=50 looks good.n
CFL=1.0   t=50 looks good.

4th order cost: 4/1.6 = 2.5            
3rd order cost: 3/1.20 = 2.5

So for this problem, might as well use rk4.




**********************************************************************************
9/29/01  CFL and viscosity test

128x128 Kelvin Helmholz initial condition.
How much viscosity is needed to keep solution smooth?


mu=.00001   cfl=.25   noisy at t=1
mu=.00005   cfl=.25   ?
mu=.0001    cfl=1.70  smooth, round vortex with 2 filiments at t=1

mu=.00005   128x128 does not look like 256x256.   (cfl=1.0)
mu=.0002    128x128 does look like 2565x256       (cfl=1.0)

So, 128x128 can resolve a viscosity of .0002 out to t=1.0,
but it cannot resolve a viscosity of .00005

Now test CFL, using the "looks good norm, at t=1.0"

CFL rk4
3.0   vorticity looks bad
2.5   vorticity looks bad
2.2   vorticity looks bad
2.1   vorticity looks good
2.0   vorticity looks good - same as 256x256 result
      running past t=1? 

CFL rk3  (1.5 rk3 = same cost as 2.0 rk4)
2.0   bad
1.5   bad
1.4   some bad oscillations
1.35  looks good
1.25  looks good
1.0   looks good

Result: rk4 is more efficient.

What about looking at energy spectrum, or structure funtions?



**********************************************************************************
9/28/01  CFL and viscosity test

CFL:  128x128

dealiased, vis=0
cfl_adv
2.0   t=.5 bad - streaks of vorticity off of sheet
      but stable so far (1200 time steps, t=7)
1.90  t=.5 bad, not as bas as t=2.0
1.80  t=.5 ok
1.75  t=.5 ok
1.50  t=.5 ok
1.15  t=.5 ok
1.00  t=.5 ok


dealiased, vis=.0001
2.0:  t=.5 bad - smoother, but still has streaks of vorticity off of sheet
      t=1.0  oval vortex + two filiments - outer filiment has oscillations
    
1.70  t=.5  looks good - much smoother than vis=0
      t=1.0 looks good - round vortex + two filiments with no oscillations

1.00  t=1.0 looks good - round vortex + two filiments with no oscillations




